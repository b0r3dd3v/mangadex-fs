pub fn client<'a, 'b>() -> clap::App<'a, 'b> {
    clap::App::new(format!("{} - client", env!("CARGO_PKG_NAME")))
        .subcommand(clap::SubCommand::with_name("kill")
            .about("Kills the mangadex-fsd daemon"))
        .subcommand(clap::SubCommand::with_name("login")
            .about("Create a MangaDex session")
            .arg(clap::Arg::with_name("username")
                .help("MangaDex username")
                .short("u")
                .long("username")
                .takes_value(true)
                .required(true))
            .arg(clap::Arg::with_name("password")
                .help("MangaDex password")
                .short("p")
                .long("password")
                .takes_value(true)
                .required(true)))
        .subcommand(clap::SubCommand::with_name("logout")
            .about("End current session"))
        .subcommand(clap::SubCommand::with_name("quicksearch")
            .about("Quick search")
            .arg(clap::Arg::with_name("query")
                .takes_value(true)
                .required(true)
                .index(1)))
        .subcommand(clap::SubCommand::with_name("add")
            .about("Adds a resource")
            .subcommand(clap::SubCommand::with_name("manga")
                .about("Adds a manga")
                .arg(clap::Arg::with_name("manga_id")
                    .help("ID of the manga")
                    .takes_value(true)
                    .required(true)
                    .validator(|m| match m.parse::<u64>() {
                        Err(e) => Err(e.to_string()),
                        _ => Ok(()),
                    })
                    .index(1)))
            .subcommand(clap::SubCommand::with_name("chapter")
                .about("Adds a chapter")
                .arg(clap::Arg::with_name("chapter_id")
                    .help("ID of the chapter")
                    .takes_value(true)
                    .required(true)
                    .validator(|m| match m.parse::<u64>() {
                        Err(e) => Err(e.to_string()),
                        _ => Ok(()),
                    })
                    .index(1))))
}