pub fn client<'a, 'b>() -> clap::App<'a, 'b> {
    clap::App::new(format!("{} - client", env!("CARGO_PKG_NAME")))
        .subcommand(clap::SubCommand::with_name("kill")
            .about("Kills the mangadex-fsd daemon"))
        .subcommand(clap::SubCommand::with_name("login")
            .about("Create a MangaDex session")
            .arg(clap::Arg::with_name("username")
                .help("MangaDex username")
                .short("u")
                .long("username")
                .takes_value(true)
                .required(true))
            .arg(clap::Arg::with_name("password")
                .help("MangaDex password")
                .short("p")
                .long("password")
                .takes_value(true)
                .required(true))
            .arg(clap::Arg::with_name("show")
                .help("Shows the session token")
                .short("s")
                .long("show")))
        .subcommand(clap::SubCommand::with_name("logout")
            .about("End current session"))
        .subcommand(clap::SubCommand::with_name("search")
            .about("Search")
            .arg(clap::Arg::with_name("title")
                .takes_value(true)
                .required(false)
                .default_value(""))
            .arg(clap::Arg::with_name("author")
                .takes_value(true)
                .short("a")
                .long("author"))
            .arg(clap::Arg::with_name("artist")
                .takes_value(true)
                .short("t")
                .long("artist"))
            .arg(clap::Arg::with_name("language")
                .takes_value(true)
                .short("l")
                .long("language"))
            .arg(clap::Arg::with_name("demographic")
                .takes_value(true)
                .short("d")
                .long("demographic")
                .multiple(true))
            .arg(clap::Arg::with_name("publication")
                .takes_value(true)
                .short("p")
                .long("publication")
                .multiple(true))
            .arg(clap::Arg::with_name("include")
                .takes_value(true)
                .short("i")
                .long("include")
                .multiple(true))
            .arg(clap::Arg::with_name("exclude")
                .takes_value(true)
                .short("e")
                .long("exclude")
                .multiple(true))
            .arg(clap::Arg::with_name("inclusion_mode")
                .takes_value(true)
                .long("inclusion"))
            .arg(clap::Arg::with_name("exclusion_mode")
                .takes_value(true)
                .long("exclusion")))
        .subcommand(clap::SubCommand::with_name("add")
            .about("Adds a resource")
            .subcommand(clap::SubCommand::with_name("manga")
                .about("Adds a manga")
                .arg(clap::Arg::with_name("manga_id")
                    .help("ID of the manga")
                    .takes_value(true)
                    .required(true)
                    .validator(|m| match m.parse::<u64>() {
                        Err(e) => Err(e.to_string()),
                        _ => Ok(())
                    }))
                .arg(clap::Arg::with_name("language")
                    .short("l")
                    .long("lang")
                    .help("Adds only chapters in provided language codes")
                    .takes_value(true)
                    .required(false)
                    .multiple(true)
                    .default_value("gb"))))
}